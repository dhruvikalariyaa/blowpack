{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchProducts } from '../store/slices/productSlice';\nconst useRealTimeRatings = filters => {\n  _s();\n  const dispatch = useDispatch();\n  const eventSourceRef = useRef(null);\n  useEffect(() => {\n    // Create EventSource connection\n    const eventSource = new EventSource('http://localhost:5000/api/sse/events');\n    eventSourceRef.current = eventSource;\n    eventSource.onopen = () => {\n      console.log('âœ… Connected to real-time rating updates');\n    };\n    eventSource.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.type === 'rating_updated') {\n          console.log('ðŸ”„ Rating updated for product:', data.productId, data.ratings);\n\n          // Refresh products to get updated ratings\n          dispatch(fetchProducts(filters));\n        }\n      } catch (error) {\n        console.error('Error parsing SSE data:', error);\n      }\n    };\n    eventSource.onerror = error => {\n      console.error('SSE connection error:', error);\n\n      // Attempt to reconnect after 5 seconds\n      setTimeout(() => {\n        if (eventSourceRef.current) {\n          eventSourceRef.current.close();\n          eventSourceRef.current = new EventSource('http://localhost:5000/api/sse/events');\n        }\n      }, 5000);\n    };\n\n    // Cleanup on unmount\n    return () => {\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n  }, [dispatch, filters]);\n  return null;\n};\n_s(useRealTimeRatings, \"QjqpDiCAtrXP04qDzDL0LK1PwXg=\", false, function () {\n  return [useDispatch];\n});\nexport default useRealTimeRatings;","map":{"version":3,"names":["useEffect","useRef","useDispatch","fetchProducts","useRealTimeRatings","filters","_s","dispatch","eventSourceRef","eventSource","EventSource","current","onopen","console","log","onmessage","event","data","JSON","parse","type","productId","ratings","error","onerror","setTimeout","close"],"sources":["E:/blowpack/frountend/src/hooks/useRealTimeRatings.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchProducts } from '../store/slices/productSlice';\r\n\r\nconst useRealTimeRatings = (filters) => {\r\n  const dispatch = useDispatch();\r\n  const eventSourceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // Create EventSource connection\r\n    const eventSource = new EventSource('http://localhost:5000/api/sse/events');\r\n    eventSourceRef.current = eventSource;\r\n\r\n    eventSource.onopen = () => {\r\n      console.log('âœ… Connected to real-time rating updates');\r\n    };\r\n\r\n    eventSource.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n        \r\n        if (data.type === 'rating_updated') {\r\n          console.log('ðŸ”„ Rating updated for product:', data.productId, data.ratings);\r\n          \r\n          // Refresh products to get updated ratings\r\n          dispatch(fetchProducts(filters));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing SSE data:', error);\r\n      }\r\n    };\r\n\r\n    eventSource.onerror = (error) => {\r\n      console.error('SSE connection error:', error);\r\n      \r\n      // Attempt to reconnect after 5 seconds\r\n      setTimeout(() => {\r\n        if (eventSourceRef.current) {\r\n          eventSourceRef.current.close();\r\n          eventSourceRef.current = new EventSource('http://localhost:5000/api/sse/events');\r\n        }\r\n      }, 5000);\r\n    };\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (eventSourceRef.current) {\r\n        eventSourceRef.current.close();\r\n        eventSourceRef.current = null;\r\n      }\r\n    };\r\n  }, [dispatch, filters]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default useRealTimeRatings;\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAMM,cAAc,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEnCD,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,WAAW,GAAG,IAAIC,WAAW,CAAC,sCAAsC,CAAC;IAC3EF,cAAc,CAACG,OAAO,GAAGF,WAAW;IAEpCA,WAAW,CAACG,MAAM,GAAG,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACxD,CAAC;IAEDL,WAAW,CAACM,SAAS,GAAIC,KAAK,IAAK;MACjC,IAAI;QACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;QAEnC,IAAIA,IAAI,CAACG,IAAI,KAAK,gBAAgB,EAAE;UAClCP,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEG,IAAI,CAACI,SAAS,EAAEJ,IAAI,CAACK,OAAO,CAAC;;UAE3E;UACAf,QAAQ,CAACJ,aAAa,CAACE,OAAO,CAAC,CAAC;QAClC;MACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDd,WAAW,CAACe,OAAO,GAAID,KAAK,IAAK;MAC/BV,OAAO,CAACU,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;;MAE7C;MACAE,UAAU,CAAC,MAAM;QACf,IAAIjB,cAAc,CAACG,OAAO,EAAE;UAC1BH,cAAc,CAACG,OAAO,CAACe,KAAK,CAAC,CAAC;UAC9BlB,cAAc,CAACG,OAAO,GAAG,IAAID,WAAW,CAAC,sCAAsC,CAAC;QAClF;MACF,CAAC,EAAE,IAAI,CAAC;IACV,CAAC;;IAED;IACA,OAAO,MAAM;MACX,IAAIF,cAAc,CAACG,OAAO,EAAE;QAC1BH,cAAc,CAACG,OAAO,CAACe,KAAK,CAAC,CAAC;QAC9BlB,cAAc,CAACG,OAAO,GAAG,IAAI;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,CAACJ,QAAQ,EAAEF,OAAO,CAAC,CAAC;EAEvB,OAAO,IAAI;AACb,CAAC;AAACC,EAAA,CAlDIF,kBAAkB;EAAA,QACLF,WAAW;AAAA;AAmD9B,eAAeE,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}