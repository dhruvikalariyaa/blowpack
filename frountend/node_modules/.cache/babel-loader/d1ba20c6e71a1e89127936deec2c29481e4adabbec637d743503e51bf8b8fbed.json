{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/oauthtoken';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n  #tokenRefreshEndpoint;\n  /**\n   * Initializes an ExternalAccountAuthorizedUserHandler instance.\n   * @param url The URL of the token refresh endpoint.\n   * @param transporter The transporter to use for the refresh request.\n   * @param clientAuthentication The client authentication credentials to use\n   *   for the refresh request.\n   */\n  constructor(options) {\n    super(options);\n    this.#tokenRefreshEndpoint = options.tokenRefreshEndpoint;\n  }\n  /**\n   * Requests a new access token from the token_url endpoint using the provided\n   *   refresh token.\n   * @param refreshToken The refresh token to use to generate a new access token.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @return A promise that resolves with the token refresh response containing\n   *   the requested access token and its expiration time.\n   */\n  async refreshToken(refreshToken, headers) {\n    const opts = {\n      ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n      url: this.#tokenRefreshEndpoint,\n      method: 'POST',\n      headers,\n      data: new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: refreshToken\n      })\n    };\n    authclient_1.AuthClient.setMethodName(opts, 'refreshToken');\n    // Apply OAuth client authentication.\n    this.applyClientAuthenticationOptions(opts);\n    try {\n      const response = await this.transporter.request(opts);\n      // Successful response.\n      const tokenRefreshResponse = response.data;\n      tokenRefreshResponse.res = response;\n      return tokenRefreshResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n        // Preserve other fields from the original error.\n        error);\n      }\n      // Request could fail before the server responds.\n      throw error;\n    }\n  }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n  cachedAccessToken;\n  externalAccountAuthorizedUserHandler;\n  refreshToken;\n  /**\n   * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n   * provided JSON object loaded from a credentials files.\n   * An error is throws if the credential is not valid.\n   * @param options The external account authorized user option object typically\n   *   from the external accoutn authorized user JSON credential file.\n   */\n  constructor(options) {\n    super(options);\n    if (options.universe_domain) {\n      this.universeDomain = options.universe_domain;\n    }\n    this.refreshToken = options.refresh_token;\n    const clientAuthentication = {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    };\n    this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler({\n      tokenRefreshEndpoint: options.token_url ?? DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain),\n      transporter: this.transporter,\n      clientAuthentication\n    });\n    this.cachedAccessToken = null;\n    this.quotaProjectId = options.quota_project_id;\n    // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n    if (typeof options?.eagerRefreshThresholdMillis !== 'number') {\n      this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = !!options?.forceRefreshOnFailure;\n  }\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    }\n    // Return GCP access token in GetAccessTokenResponse format.\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = new Headers({\n      authorization: `Bearer ${accessTokenResponse.token}`\n    });\n    return this.addSharedMetadataHeaders(headers);\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n   * @return A promise that resolves with the successful response.\n   */\n  async requestAsync(opts, reAuthRetried = false) {\n    let response;\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n      this.addUserProjectAndAuthHeaders(opts.headers, requestHeaders);\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!reAuthRetried && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * @return A promise that resolves with the refreshed credential.\n   */\n  async refreshAccessTokenAsync() {\n    // Refresh the access token using the refresh token.\n    const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n    this.cachedAccessToken = {\n      access_token: refreshResponse.access_token,\n      expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n      res: refreshResponse.res\n    };\n    if (refreshResponse.refresh_token !== undefined) {\n      this.refreshToken = refreshResponse.refresh_token;\n    }\n    return this.cachedAccessToken;\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param credentials The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(credentials) {\n    const now = new Date().getTime();\n    return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExternalAccountAuthorizedUserClient","EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE","authclient_1","require","oauth2common_1","gaxios_1","stream","baseexternalclient_1","DEFAULT_TOKEN_URL","ExternalAccountAuthorizedUserHandler","OAuthClientAuthHandler","tokenRefreshEndpoint","constructor","options","refreshToken","headers","opts","RETRY_CONFIG","url","method","data","URLSearchParams","grant_type","refresh_token","AuthClient","setMethodName","applyClientAuthenticationOptions","response","transporter","request","tokenRefreshResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse","cachedAccessToken","externalAccountAuthorizedUserHandler","universe_domain","universeDomain","clientAuthentication","confidentialClientType","clientId","client_id","clientSecret","client_secret","token_url","replace","quotaProjectId","quota_project_id","eagerRefreshThresholdMillis","EXPIRATION_TIME_OFFSET","forceRefreshOnFailure","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","getRequestHeaders","accessTokenResponse","Headers","authorization","addSharedMetadataHeaders","callback","requestAsync","then","r","e","reAuthRetried","requestHeaders","Gaxios","mergeHeaders","addUserProjectAndAuthHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","refreshResponse","expiry_date","Date","getTime","expires_in","undefined","credentials","now"],"sources":["E:/blowpack/frountend/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\nconst DEFAULT_TOKEN_URL = 'https://sts.{universeDomain}/v1/oauthtoken';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    #tokenRefreshEndpoint;\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */\n    constructor(options) {\n        super(options);\n        this.#tokenRefreshEndpoint = options.tokenRefreshEndpoint;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */\n    async refreshToken(refreshToken, headers) {\n        const opts = {\n            ...ExternalAccountAuthorizedUserHandler.RETRY_CONFIG,\n            url: this.#tokenRefreshEndpoint,\n            method: 'POST',\n            headers,\n            data: new URLSearchParams({\n                grant_type: 'refresh_token',\n                refresh_token: refreshToken,\n            }),\n        };\n        authclient_1.AuthClient.setMethodName(opts, 'refreshToken');\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    cachedAccessToken;\n    externalAccountAuthorizedUserHandler;\n    refreshToken;\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     */\n    constructor(options) {\n        super(options);\n        if (options.universe_domain) {\n            this.universeDomain = options.universe_domain;\n        }\n        this.refreshToken = options.refresh_token;\n        const clientAuthentication = {\n            confidentialClientType: 'basic',\n            clientId: options.client_id,\n            clientSecret: options.client_secret,\n        };\n        this.externalAccountAuthorizedUserHandler =\n            new ExternalAccountAuthorizedUserHandler({\n                tokenRefreshEndpoint: options.token_url ??\n                    DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain),\n                transporter: this.transporter,\n                clientAuthentication,\n            });\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof options?.eagerRefreshThresholdMillis !== 'number') {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = options\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!options?.forceRefreshOnFailure;\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = new Headers({\n            authorization: `Bearer ${accessTokenResponse.token}`,\n        });\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param reAuthRetried Whether the current attempt is a retry after a failed attempt due to an auth failure.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, reAuthRetried = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n            this.addUserProjectAndAuthHeaders(opts.headers, requestHeaders);\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!reAuthRetried &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */\n    async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res,\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date\n            ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n//# sourceMappingURL=externalAccountAuthorizedUserClient.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}