{"ast":null,"code":"\"use strict\";\n\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = require(\"events\");\nconst gaxios_1 = require(\"gaxios\");\nconst util_1 = require(\"../util\");\nconst google_logging_utils_1 = require(\"google-logging-utils\");\nconst shared_cjs_1 = require(\"../shared.cjs\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\n/**\n * The base of all Auth Clients.\n */\nclass AuthClient extends events_1.EventEmitter {\n  apiKey;\n  projectId;\n  /**\n   * The quota project ID. The quota project can be used by client libraries for the billing purpose.\n   * See {@link https://cloud.google.com/docs/quota Working with quotas}\n   */\n  quotaProjectId;\n  /**\n   * The {@link Gaxios `Gaxios`} instance used for making requests.\n   */\n  transporter;\n  credentials = {};\n  eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n  forceRefreshOnFailure = false;\n  universeDomain = exports.DEFAULT_UNIVERSE;\n  /**\n   * Symbols that can be added to GaxiosOptions to specify the method name that is\n   * making an RPC call, for logging purposes, as well as a string ID that can be\n   * used to correlate calls and responses.\n   */\n  static RequestMethodNameSymbol = Symbol('request method name');\n  static RequestLogIdSymbol = Symbol('request log id');\n  constructor(opts = {}) {\n    super();\n    const options = (0, util_1.originalOrCamelOptions)(opts);\n    // Shared auth options\n    this.apiKey = opts.apiKey;\n    this.projectId = options.get('project_id') ?? null;\n    this.quotaProjectId = options.get('quota_project_id');\n    this.credentials = options.get('credentials') ?? {};\n    this.universeDomain = options.get('universe_domain') ?? exports.DEFAULT_UNIVERSE;\n    // Shared client options\n    this.transporter = opts.transporter ?? new gaxios_1.Gaxios(opts.transporterOptions);\n    if (options.get('useAuthRequestParameters') !== false) {\n      this.transporter.interceptors.request.add(AuthClient.DEFAULT_REQUEST_INTERCEPTOR);\n      this.transporter.interceptors.response.add(AuthClient.DEFAULT_RESPONSE_INTERCEPTOR);\n    }\n    if (opts.eagerRefreshThresholdMillis) {\n      this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = opts.forceRefreshOnFailure ?? false;\n  }\n  /**\n   * A {@link fetch `fetch`} compliant API for {@link AuthClient}.\n   *\n   * @see {@link AuthClient.request} for the classic method.\n   *\n   * @remarks\n   *\n   * This is useful as a drop-in replacement for `fetch` API usage.\n   *\n   * @example\n   *\n   * ```ts\n   * const authClient = new AuthClient();\n   * const fetchWithAuthClient: typeof fetch = (...args) => authClient.fetch(...args);\n   * await fetchWithAuthClient('https://example.com');\n   * ```\n   *\n   * @param args `fetch` API or {@link Gaxios.fetch `Gaxios#fetch`} parameters\n   * @returns the {@link GaxiosResponse} with Gaxios-added properties\n   */\n  fetch(...args) {\n    // Up to 2 parameters in either overload\n    const input = args[0];\n    const init = args[1];\n    let url = undefined;\n    const headers = new Headers();\n    // prepare URL\n    if (typeof input === 'string') {\n      url = new URL(input);\n    } else if (input instanceof URL) {\n      url = input;\n    } else if (input && input.url) {\n      url = new URL(input.url);\n    }\n    // prepare headers\n    if (input && typeof input === 'object' && 'headers' in input) {\n      gaxios_1.Gaxios.mergeHeaders(headers, input.headers);\n    }\n    if (init) {\n      gaxios_1.Gaxios.mergeHeaders(headers, new Headers(init.headers));\n    }\n    // prepare request\n    if (typeof input === 'object' && !(input instanceof URL)) {\n      // input must have been a non-URL object\n      return this.request({\n        ...init,\n        ...input,\n        headers,\n        url\n      });\n    } else {\n      // input must have been a string or URL\n      return this.request({\n        ...init,\n        headers,\n        url\n      });\n    }\n  }\n  /**\n   * Sets the auth credentials.\n   */\n  setCredentials(credentials) {\n    this.credentials = credentials;\n  }\n  /**\n   * Append additional headers, e.g., x-goog-user-project, shared across the\n   * classes inheriting AuthClient. This method should be used by any method\n   * that overrides getRequestMetadataAsync(), which is a shared helper for\n   * setting request information in both gRPC and HTTP API calls.\n   *\n   * @param headers object to append additional headers to.\n   */\n  addSharedMetadataHeaders(headers) {\n    // quota_project_id, stored in application_default_credentials.json, is set in\n    // the x-goog-user-project header, to indicate an alternate account for\n    // billing and quota:\n    if (!headers.has('x-goog-user-project') &&\n    // don't override a value the user sets.\n    this.quotaProjectId) {\n      headers.set('x-goog-user-project', this.quotaProjectId);\n    }\n    return headers;\n  }\n  /**\n   * Adds the `x-goog-user-project` and `authorization` headers to the target Headers\n   * object, if they exist on the source.\n   *\n   * @param target the headers to target\n   * @param source the headers to source from\n   * @returns the target headers\n   */\n  addUserProjectAndAuthHeaders(target, source) {\n    const xGoogUserProject = source.get('x-goog-user-project');\n    const authorizationHeader = source.get('authorization');\n    if (xGoogUserProject) {\n      target.set('x-goog-user-project', xGoogUserProject);\n    }\n    if (authorizationHeader) {\n      target.set('authorization', authorizationHeader);\n    }\n    return target;\n  }\n  static log = (0, google_logging_utils_1.log)('auth');\n  static DEFAULT_REQUEST_INTERCEPTOR = {\n    resolved: async config => {\n      // Set `x-goog-api-client`, if not already set\n      if (!config.headers.has('x-goog-api-client')) {\n        const nodeVersion = process.version.replace(/^v/, '');\n        config.headers.set('x-goog-api-client', `gl-node/${nodeVersion}`);\n      }\n      // Set `User-Agent`\n      const userAgent = config.headers.get('User-Agent');\n      if (!userAgent) {\n        config.headers.set('User-Agent', shared_cjs_1.USER_AGENT);\n      } else if (!userAgent.includes(`${shared_cjs_1.PRODUCT_NAME}/`)) {\n        config.headers.set('User-Agent', `${userAgent} ${shared_cjs_1.USER_AGENT}`);\n      }\n      try {\n        const symbols = config;\n        const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n        // This doesn't need to be very unique or interesting, it's just an aid for\n        // matching requests to responses.\n        const logId = `${Math.floor(Math.random() * 1000)}`;\n        symbols[AuthClient.RequestLogIdSymbol] = logId;\n        // Boil down the object we're printing out.\n        const logObject = {\n          url: config.url,\n          headers: config.headers\n        };\n        if (methodName) {\n          AuthClient.log.info('%s [%s] request %j', methodName, logId, logObject);\n        } else {\n          AuthClient.log.info('[%s] request %j', logId, logObject);\n        }\n      } catch (e) {\n        // Logging must not create new errors; swallow them all.\n      }\n      return config;\n    }\n  };\n  static DEFAULT_RESPONSE_INTERCEPTOR = {\n    resolved: async response => {\n      try {\n        const symbols = response.config;\n        const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n        const logId = symbols[AuthClient.RequestLogIdSymbol];\n        if (methodName) {\n          AuthClient.log.info('%s [%s] response %j', methodName, logId, response.data);\n        } else {\n          AuthClient.log.info('[%s] response %j', logId, response.data);\n        }\n      } catch (e) {\n        // Logging must not create new errors; swallow them all.\n      }\n      return response;\n    },\n    rejected: async error => {\n      try {\n        const symbols = error.config;\n        const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n        const logId = symbols[AuthClient.RequestLogIdSymbol];\n        if (methodName) {\n          AuthClient.log.info('%s [%s] error %j', methodName, logId, error.response?.data);\n        } else {\n          AuthClient.log.error('[%s] error %j', logId, error.response?.data);\n        }\n      } catch (e) {\n        // Logging must not create new errors; swallow them all.\n      }\n      // Re-throw the error.\n      throw error;\n    }\n  };\n  /**\n   * Sets the method name that is making a Gaxios request, so that logging may tag\n   * log lines with the operation.\n   * @param config A Gaxios request config\n   * @param methodName The method name making the call\n   */\n  static setMethodName(config, methodName) {\n    try {\n      const symbols = config;\n      symbols[AuthClient.RequestMethodNameSymbol] = methodName;\n    } catch (e) {\n      // Logging must not create new errors; swallow them all.\n    }\n  }\n  /**\n   * Retry config for Auth-related requests.\n   *\n   * @remarks\n   *\n   * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n   * config as some downstream APIs would prefer if customers explicitly enable retries,\n   * such as GCS.\n   */\n  static get RETRY_CONFIG() {\n    return {\n      retry: true,\n      retryConfig: {\n        httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE']\n      }\n    };\n  }\n}\nexports.AuthClient = AuthClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AuthClient","DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS","DEFAULT_UNIVERSE","events_1","require","gaxios_1","util_1","google_logging_utils_1","shared_cjs_1","EventEmitter","apiKey","projectId","quotaProjectId","transporter","credentials","eagerRefreshThresholdMillis","forceRefreshOnFailure","universeDomain","RequestMethodNameSymbol","Symbol","RequestLogIdSymbol","constructor","opts","options","originalOrCamelOptions","get","Gaxios","transporterOptions","interceptors","request","add","DEFAULT_REQUEST_INTERCEPTOR","response","DEFAULT_RESPONSE_INTERCEPTOR","fetch","args","input","init","url","undefined","headers","Headers","URL","mergeHeaders","setCredentials","addSharedMetadataHeaders","has","set","addUserProjectAndAuthHeaders","target","source","xGoogUserProject","authorizationHeader","log","resolved","config","nodeVersion","process","version","replace","userAgent","USER_AGENT","includes","PRODUCT_NAME","symbols","methodName","logId","Math","floor","random","logObject","info","e","data","rejected","error","setMethodName","RETRY_CONFIG","retry","retryConfig","httpMethodsToRetry"],"sources":["E:/blowpack/frountend/node_modules/google-auth-library/build/src/auth/authclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2012 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthClient = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = exports.DEFAULT_UNIVERSE = void 0;\nconst events_1 = require(\"events\");\nconst gaxios_1 = require(\"gaxios\");\nconst util_1 = require(\"../util\");\nconst google_logging_utils_1 = require(\"google-logging-utils\");\nconst shared_cjs_1 = require(\"../shared.cjs\");\n/**\n * The default cloud universe\n *\n * @see {@link AuthJSONOptions.universe_domain}\n */\nexports.DEFAULT_UNIVERSE = 'googleapis.com';\n/**\n * The default {@link AuthClientOptions.eagerRefreshThresholdMillis}\n */\nexports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS = 5 * 60 * 1000;\n/**\n * The base of all Auth Clients.\n */\nclass AuthClient extends events_1.EventEmitter {\n    apiKey;\n    projectId;\n    /**\n     * The quota project ID. The quota project can be used by client libraries for the billing purpose.\n     * See {@link https://cloud.google.com/docs/quota Working with quotas}\n     */\n    quotaProjectId;\n    /**\n     * The {@link Gaxios `Gaxios`} instance used for making requests.\n     */\n    transporter;\n    credentials = {};\n    eagerRefreshThresholdMillis = exports.DEFAULT_EAGER_REFRESH_THRESHOLD_MILLIS;\n    forceRefreshOnFailure = false;\n    universeDomain = exports.DEFAULT_UNIVERSE;\n    /**\n     * Symbols that can be added to GaxiosOptions to specify the method name that is\n     * making an RPC call, for logging purposes, as well as a string ID that can be\n     * used to correlate calls and responses.\n     */\n    static RequestMethodNameSymbol = Symbol('request method name');\n    static RequestLogIdSymbol = Symbol('request log id');\n    constructor(opts = {}) {\n        super();\n        const options = (0, util_1.originalOrCamelOptions)(opts);\n        // Shared auth options\n        this.apiKey = opts.apiKey;\n        this.projectId = options.get('project_id') ?? null;\n        this.quotaProjectId = options.get('quota_project_id');\n        this.credentials = options.get('credentials') ?? {};\n        this.universeDomain = options.get('universe_domain') ?? exports.DEFAULT_UNIVERSE;\n        // Shared client options\n        this.transporter = opts.transporter ?? new gaxios_1.Gaxios(opts.transporterOptions);\n        if (options.get('useAuthRequestParameters') !== false) {\n            this.transporter.interceptors.request.add(AuthClient.DEFAULT_REQUEST_INTERCEPTOR);\n            this.transporter.interceptors.response.add(AuthClient.DEFAULT_RESPONSE_INTERCEPTOR);\n        }\n        if (opts.eagerRefreshThresholdMillis) {\n            this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = opts.forceRefreshOnFailure ?? false;\n    }\n    /**\n     * A {@link fetch `fetch`} compliant API for {@link AuthClient}.\n     *\n     * @see {@link AuthClient.request} for the classic method.\n     *\n     * @remarks\n     *\n     * This is useful as a drop-in replacement for `fetch` API usage.\n     *\n     * @example\n     *\n     * ```ts\n     * const authClient = new AuthClient();\n     * const fetchWithAuthClient: typeof fetch = (...args) => authClient.fetch(...args);\n     * await fetchWithAuthClient('https://example.com');\n     * ```\n     *\n     * @param args `fetch` API or {@link Gaxios.fetch `Gaxios#fetch`} parameters\n     * @returns the {@link GaxiosResponse} with Gaxios-added properties\n     */\n    fetch(...args) {\n        // Up to 2 parameters in either overload\n        const input = args[0];\n        const init = args[1];\n        let url = undefined;\n        const headers = new Headers();\n        // prepare URL\n        if (typeof input === 'string') {\n            url = new URL(input);\n        }\n        else if (input instanceof URL) {\n            url = input;\n        }\n        else if (input && input.url) {\n            url = new URL(input.url);\n        }\n        // prepare headers\n        if (input && typeof input === 'object' && 'headers' in input) {\n            gaxios_1.Gaxios.mergeHeaders(headers, input.headers);\n        }\n        if (init) {\n            gaxios_1.Gaxios.mergeHeaders(headers, new Headers(init.headers));\n        }\n        // prepare request\n        if (typeof input === 'object' && !(input instanceof URL)) {\n            // input must have been a non-URL object\n            return this.request({ ...init, ...input, headers, url });\n        }\n        else {\n            // input must have been a string or URL\n            return this.request({ ...init, headers, url });\n        }\n    }\n    /**\n     * Sets the auth credentials.\n     */\n    setCredentials(credentials) {\n        this.credentials = credentials;\n    }\n    /**\n     * Append additional headers, e.g., x-goog-user-project, shared across the\n     * classes inheriting AuthClient. This method should be used by any method\n     * that overrides getRequestMetadataAsync(), which is a shared helper for\n     * setting request information in both gRPC and HTTP API calls.\n     *\n     * @param headers object to append additional headers to.\n     */\n    addSharedMetadataHeaders(headers) {\n        // quota_project_id, stored in application_default_credentials.json, is set in\n        // the x-goog-user-project header, to indicate an alternate account for\n        // billing and quota:\n        if (!headers.has('x-goog-user-project') && // don't override a value the user sets.\n            this.quotaProjectId) {\n            headers.set('x-goog-user-project', this.quotaProjectId);\n        }\n        return headers;\n    }\n    /**\n     * Adds the `x-goog-user-project` and `authorization` headers to the target Headers\n     * object, if they exist on the source.\n     *\n     * @param target the headers to target\n     * @param source the headers to source from\n     * @returns the target headers\n     */\n    addUserProjectAndAuthHeaders(target, source) {\n        const xGoogUserProject = source.get('x-goog-user-project');\n        const authorizationHeader = source.get('authorization');\n        if (xGoogUserProject) {\n            target.set('x-goog-user-project', xGoogUserProject);\n        }\n        if (authorizationHeader) {\n            target.set('authorization', authorizationHeader);\n        }\n        return target;\n    }\n    static log = (0, google_logging_utils_1.log)('auth');\n    static DEFAULT_REQUEST_INTERCEPTOR = {\n        resolved: async (config) => {\n            // Set `x-goog-api-client`, if not already set\n            if (!config.headers.has('x-goog-api-client')) {\n                const nodeVersion = process.version.replace(/^v/, '');\n                config.headers.set('x-goog-api-client', `gl-node/${nodeVersion}`);\n            }\n            // Set `User-Agent`\n            const userAgent = config.headers.get('User-Agent');\n            if (!userAgent) {\n                config.headers.set('User-Agent', shared_cjs_1.USER_AGENT);\n            }\n            else if (!userAgent.includes(`${shared_cjs_1.PRODUCT_NAME}/`)) {\n                config.headers.set('User-Agent', `${userAgent} ${shared_cjs_1.USER_AGENT}`);\n            }\n            try {\n                const symbols = config;\n                const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n                // This doesn't need to be very unique or interesting, it's just an aid for\n                // matching requests to responses.\n                const logId = `${Math.floor(Math.random() * 1000)}`;\n                symbols[AuthClient.RequestLogIdSymbol] = logId;\n                // Boil down the object we're printing out.\n                const logObject = {\n                    url: config.url,\n                    headers: config.headers,\n                };\n                if (methodName) {\n                    AuthClient.log.info('%s [%s] request %j', methodName, logId, logObject);\n                }\n                else {\n                    AuthClient.log.info('[%s] request %j', logId, logObject);\n                }\n            }\n            catch (e) {\n                // Logging must not create new errors; swallow them all.\n            }\n            return config;\n        },\n    };\n    static DEFAULT_RESPONSE_INTERCEPTOR = {\n        resolved: async (response) => {\n            try {\n                const symbols = response.config;\n                const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n                const logId = symbols[AuthClient.RequestLogIdSymbol];\n                if (methodName) {\n                    AuthClient.log.info('%s [%s] response %j', methodName, logId, response.data);\n                }\n                else {\n                    AuthClient.log.info('[%s] response %j', logId, response.data);\n                }\n            }\n            catch (e) {\n                // Logging must not create new errors; swallow them all.\n            }\n            return response;\n        },\n        rejected: async (error) => {\n            try {\n                const symbols = error.config;\n                const methodName = symbols[AuthClient.RequestMethodNameSymbol];\n                const logId = symbols[AuthClient.RequestLogIdSymbol];\n                if (methodName) {\n                    AuthClient.log.info('%s [%s] error %j', methodName, logId, error.response?.data);\n                }\n                else {\n                    AuthClient.log.error('[%s] error %j', logId, error.response?.data);\n                }\n            }\n            catch (e) {\n                // Logging must not create new errors; swallow them all.\n            }\n            // Re-throw the error.\n            throw error;\n        },\n    };\n    /**\n     * Sets the method name that is making a Gaxios request, so that logging may tag\n     * log lines with the operation.\n     * @param config A Gaxios request config\n     * @param methodName The method name making the call\n     */\n    static setMethodName(config, methodName) {\n        try {\n            const symbols = config;\n            symbols[AuthClient.RequestMethodNameSymbol] = methodName;\n        }\n        catch (e) {\n            // Logging must not create new errors; swallow them all.\n        }\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */\n    static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\n            },\n        };\n    }\n}\nexports.AuthClient = AuthClient;\n//# sourceMappingURL=authclient.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}