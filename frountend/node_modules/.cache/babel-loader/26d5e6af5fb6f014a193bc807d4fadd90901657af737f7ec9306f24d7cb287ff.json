{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\nconst util_1 = require(\"../util\");\nconst gaxios_1 = require(\"gaxios\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n  environmentId;\n  awsSecurityCredentialsSupplier;\n  regionalCredVerificationUrl;\n  awsRequestSigner;\n  region;\n  static #DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15';\n  /**\n   * @deprecated AWS client no validates the EC2 metadata address.\n   **/\n  static AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n  /**\n   * @deprecated AWS client no validates the EC2 metadata address.\n   **/\n  static AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   */\n  constructor(options) {\n    super(options);\n    const opts = (0, util_1.originalOrCamelOptions)(options);\n    const credentialSource = opts.get('credential_source');\n    const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n    // Validate credential sourcing configuration.\n    if (!credentialSource && !awsSecurityCredentialsSupplier) {\n      throw new Error('A credential source or AWS security credentials supplier must be specified.');\n    }\n    if (credentialSource && awsSecurityCredentialsSupplier) {\n      throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n    }\n    if (awsSecurityCredentialsSupplier) {\n      this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n      this.regionalCredVerificationUrl = AwsClient.#DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\n      this.credentialSourceType = 'programmatic';\n    } else {\n      const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n      this.environmentId = credentialSourceOpts.get('environment_id');\n      // This is only required if the AWS region is not available in the\n      // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n      const regionUrl = credentialSourceOpts.get('region_url');\n      // This is only required if AWS security credentials are not available in\n      // environment variables.\n      const securityCredentialsUrl = credentialSourceOpts.get('url');\n      const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n      this.awsSecurityCredentialsSupplier = new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n        regionUrl: regionUrl,\n        securityCredentialsUrl: securityCredentialsUrl,\n        imdsV2SessionTokenUrl: imdsV2SessionTokenUrl\n      });\n      this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n      this.credentialSourceType = 'aws';\n      // Data validators.\n      this.validateEnvironmentId();\n    }\n    this.awsRequestSigner = null;\n    this.region = '';\n  }\n  validateEnvironmentId() {\n    const match = this.environmentId?.match(/^(aws)(\\d+)$/);\n    if (!match || !this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n    }\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint. This will call the\n   * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n   * Security Credentials, then use them to create a signed AWS STS request that\n   * can be exchanged for a GCP access token.\n   * @return A promise that resolves with the external subject token.\n   */\n  async retrieveSubjectToken() {\n    // Initialize AWS request signer if not already initialized.\n    if (!this.awsRequestSigner) {\n      this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n      this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n        return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n      }, this.region);\n    }\n    // Generate signed request to AWS STS GetCallerIdentity API.\n    // Use the required regional endpoint. Otherwise, the request will fail.\n    const options = await this.awsRequestSigner.getRequestOptions({\n      ...AwsClient.RETRY_CONFIG,\n      url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n      method: 'POST'\n    });\n    // The GCP STS endpoint expects the headers to be formatted as:\n    // [\n    //   {key: 'x-amz-date', value: '...'},\n    //   {key: 'authorization', value: '...'},\n    //   ...\n    // ]\n    // And then serialized as:\n    // encodeURIComponent(JSON.stringify({\n    //   url: '...',\n    //   method: 'POST',\n    //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n    // }))\n    const reformattedHeader = [];\n    const extendedHeaders = gaxios_1.Gaxios.mergeHeaders({\n      // The full, canonical resource name of the workload identity pool\n      // provider, with or without the HTTPS prefix.\n      // Including this header as part of the signature is recommended to\n      // ensure data integrity.\n      'x-goog-cloud-target-resource': this.audience\n    }, options.headers);\n    // Reformat header to GCP STS expected format.\n    extendedHeaders.forEach((value, key) => reformattedHeader.push({\n      key,\n      value\n    }));\n    // Serialize the reformatted signed request.\n    return encodeURIComponent(JSON.stringify({\n      url: options.url,\n      method: options.method,\n      headers: reformattedHeader\n    }));\n  }\n}\nexports.AwsClient = AwsClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","AwsClient","awsrequestsigner_1","require","baseexternalclient_1","defaultawssecuritycredentialssupplier_1","util_1","gaxios_1","BaseExternalAccountClient","environmentId","awsSecurityCredentialsSupplier","regionalCredVerificationUrl","awsRequestSigner","region","DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL","AWS_EC2_METADATA_IPV4_ADDRESS","AWS_EC2_METADATA_IPV6_ADDRESS","constructor","options","opts","originalOrCamelOptions","credentialSource","get","Error","credentialSourceType","credentialSourceOpts","regionUrl","securityCredentialsUrl","imdsV2SessionTokenUrl","DefaultAwsSecurityCredentialsSupplier","validateEnvironmentId","match","parseInt","retrieveSubjectToken","getAwsRegion","supplierContext","AwsRequestSigner","getAwsSecurityCredentials","getRequestOptions","RETRY_CONFIG","url","replace","method","reformattedHeader","extendedHeaders","Gaxios","mergeHeaders","audience","headers","forEach","key","push","encodeURIComponent","JSON","stringify"],"sources":["E:/blowpack/frountend/node_modules/google-auth-library/build/src/auth/awsclient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AwsClient = void 0;\nconst awsrequestsigner_1 = require(\"./awsrequestsigner\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\nconst defaultawssecuritycredentialssupplier_1 = require(\"./defaultawssecuritycredentialssupplier\");\nconst util_1 = require(\"../util\");\nconst gaxios_1 = require(\"gaxios\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\nclass AwsClient extends baseexternalclient_1.BaseExternalAccountClient {\n    environmentId;\n    awsSecurityCredentialsSupplier;\n    regionalCredVerificationUrl;\n    awsRequestSigner;\n    region;\n    static #DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL = 'https://sts.{region}.amazonaws.com?Action=GetCallerIdentity&Version=2011-06-15';\n    /**\n     * @deprecated AWS client no validates the EC2 metadata address.\n     **/\n    static AWS_EC2_METADATA_IPV4_ADDRESS = '169.254.169.254';\n    /**\n     * @deprecated AWS client no validates the EC2 metadata address.\n     **/\n    static AWS_EC2_METADATA_IPV6_ADDRESS = 'fd00:ec2::254';\n    /**\n     * Instantiates an AwsClient instance using the provided JSON\n     * object loaded from an external account credentials file.\n     * An error is thrown if the credential is not a valid AWS credential.\n     * @param options The external account options object typically loaded\n     *   from the external account JSON credential file.\n     */\n    constructor(options) {\n        super(options);\n        const opts = (0, util_1.originalOrCamelOptions)(options);\n        const credentialSource = opts.get('credential_source');\n        const awsSecurityCredentialsSupplier = opts.get('aws_security_credentials_supplier');\n        // Validate credential sourcing configuration.\n        if (!credentialSource && !awsSecurityCredentialsSupplier) {\n            throw new Error('A credential source or AWS security credentials supplier must be specified.');\n        }\n        if (credentialSource && awsSecurityCredentialsSupplier) {\n            throw new Error('Only one of credential source or AWS security credentials supplier can be specified.');\n        }\n        if (awsSecurityCredentialsSupplier) {\n            this.awsSecurityCredentialsSupplier = awsSecurityCredentialsSupplier;\n            this.regionalCredVerificationUrl =\n                AwsClient.#DEFAULT_AWS_REGIONAL_CREDENTIAL_VERIFICATION_URL;\n            this.credentialSourceType = 'programmatic';\n        }\n        else {\n            const credentialSourceOpts = (0, util_1.originalOrCamelOptions)(credentialSource);\n            this.environmentId = credentialSourceOpts.get('environment_id');\n            // This is only required if the AWS region is not available in the\n            // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n            const regionUrl = credentialSourceOpts.get('region_url');\n            // This is only required if AWS security credentials are not available in\n            // environment variables.\n            const securityCredentialsUrl = credentialSourceOpts.get('url');\n            const imdsV2SessionTokenUrl = credentialSourceOpts.get('imdsv2_session_token_url');\n            this.awsSecurityCredentialsSupplier =\n                new defaultawssecuritycredentialssupplier_1.DefaultAwsSecurityCredentialsSupplier({\n                    regionUrl: regionUrl,\n                    securityCredentialsUrl: securityCredentialsUrl,\n                    imdsV2SessionTokenUrl: imdsV2SessionTokenUrl,\n                });\n            this.regionalCredVerificationUrl = credentialSourceOpts.get('regional_cred_verification_url');\n            this.credentialSourceType = 'aws';\n            // Data validators.\n            this.validateEnvironmentId();\n        }\n        this.awsRequestSigner = null;\n        this.region = '';\n    }\n    validateEnvironmentId() {\n        const match = this.environmentId?.match(/^(aws)(\\d+)$/);\n        if (!match || !this.regionalCredVerificationUrl) {\n            throw new Error('No valid AWS \"credential_source\" provided');\n        }\n        else if (parseInt(match[2], 10) !== 1) {\n            throw new Error(`aws version \"${match[2]}\" is not supported in the current build.`);\n        }\n    }\n    /**\n     * Triggered when an external subject token is needed to be exchanged for a\n     * GCP access token via GCP STS endpoint. This will call the\n     * {@link AwsSecurityCredentialsSupplier} to retrieve an AWS region and AWS\n     * Security Credentials, then use them to create a signed AWS STS request that\n     * can be exchanged for a GCP access token.\n     * @return A promise that resolves with the external subject token.\n     */\n    async retrieveSubjectToken() {\n        // Initialize AWS request signer if not already initialized.\n        if (!this.awsRequestSigner) {\n            this.region = await this.awsSecurityCredentialsSupplier.getAwsRegion(this.supplierContext);\n            this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner(async () => {\n                return this.awsSecurityCredentialsSupplier.getAwsSecurityCredentials(this.supplierContext);\n            }, this.region);\n        }\n        // Generate signed request to AWS STS GetCallerIdentity API.\n        // Use the required regional endpoint. Otherwise, the request will fail.\n        const options = await this.awsRequestSigner.getRequestOptions({\n            ...AwsClient.RETRY_CONFIG,\n            url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n            method: 'POST',\n        });\n        // The GCP STS endpoint expects the headers to be formatted as:\n        // [\n        //   {key: 'x-amz-date', value: '...'},\n        //   {key: 'authorization', value: '...'},\n        //   ...\n        // ]\n        // And then serialized as:\n        // encodeURIComponent(JSON.stringify({\n        //   url: '...',\n        //   method: 'POST',\n        //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n        // }))\n        const reformattedHeader = [];\n        const extendedHeaders = gaxios_1.Gaxios.mergeHeaders({\n            // The full, canonical resource name of the workload identity pool\n            // provider, with or without the HTTPS prefix.\n            // Including this header as part of the signature is recommended to\n            // ensure data integrity.\n            'x-goog-cloud-target-resource': this.audience,\n        }, options.headers);\n        // Reformat header to GCP STS expected format.\n        extendedHeaders.forEach((value, key) => reformattedHeader.push({ key, value }));\n        // Serialize the reformatted signed request.\n        return encodeURIComponent(JSON.stringify({\n            url: options.url,\n            method: options.method,\n            headers: reformattedHeader,\n        }));\n    }\n}\nexports.AwsClient = AwsClient;\n//# sourceMappingURL=awsclient.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAC5D,MAAME,uCAAuC,GAAGF,OAAO,CAAC,yCAAyC,CAAC;AAClG,MAAMG,MAAM,GAAGH,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA,MAAMF,SAAS,SAASG,oBAAoB,CAACI,yBAAyB,CAAC;EACnEC,aAAa;EACbC,8BAA8B;EAC9BC,2BAA2B;EAC3BC,gBAAgB;EAChBC,MAAM;EACN,OAAO,CAACC,gDAAgD,GAAG,gFAAgF;EAC3I;AACJ;AACA;EACI,OAAOC,6BAA6B,GAAG,iBAAiB;EACxD;AACJ;AACA;EACI,OAAOC,6BAA6B,GAAG,eAAe;EACtD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,OAAO,EAAE;IACjB,KAAK,CAACA,OAAO,CAAC;IACd,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEb,MAAM,CAACc,sBAAsB,EAAEF,OAAO,CAAC;IACxD,MAAMG,gBAAgB,GAAGF,IAAI,CAACG,GAAG,CAAC,mBAAmB,CAAC;IACtD,MAAMZ,8BAA8B,GAAGS,IAAI,CAACG,GAAG,CAAC,mCAAmC,CAAC;IACpF;IACA,IAAI,CAACD,gBAAgB,IAAI,CAACX,8BAA8B,EAAE;MACtD,MAAM,IAAIa,KAAK,CAAC,6EAA6E,CAAC;IAClG;IACA,IAAIF,gBAAgB,IAAIX,8BAA8B,EAAE;MACpD,MAAM,IAAIa,KAAK,CAAC,sFAAsF,CAAC;IAC3G;IACA,IAAIb,8BAA8B,EAAE;MAChC,IAAI,CAACA,8BAA8B,GAAGA,8BAA8B;MACpE,IAAI,CAACC,2BAA2B,GAC5BV,SAAS,CAAC,CAACa,gDAAgD;MAC/D,IAAI,CAACU,oBAAoB,GAAG,cAAc;IAC9C,CAAC,MACI;MACD,MAAMC,oBAAoB,GAAG,CAAC,CAAC,EAAEnB,MAAM,CAACc,sBAAsB,EAAEC,gBAAgB,CAAC;MACjF,IAAI,CAACZ,aAAa,GAAGgB,oBAAoB,CAACH,GAAG,CAAC,gBAAgB,CAAC;MAC/D;MACA;MACA,MAAMI,SAAS,GAAGD,oBAAoB,CAACH,GAAG,CAAC,YAAY,CAAC;MACxD;MACA;MACA,MAAMK,sBAAsB,GAAGF,oBAAoB,CAACH,GAAG,CAAC,KAAK,CAAC;MAC9D,MAAMM,qBAAqB,GAAGH,oBAAoB,CAACH,GAAG,CAAC,0BAA0B,CAAC;MAClF,IAAI,CAACZ,8BAA8B,GAC/B,IAAIL,uCAAuC,CAACwB,qCAAqC,CAAC;QAC9EH,SAAS,EAAEA,SAAS;QACpBC,sBAAsB,EAAEA,sBAAsB;QAC9CC,qBAAqB,EAAEA;MAC3B,CAAC,CAAC;MACN,IAAI,CAACjB,2BAA2B,GAAGc,oBAAoB,CAACH,GAAG,CAAC,gCAAgC,CAAC;MAC7F,IAAI,CAACE,oBAAoB,GAAG,KAAK;MACjC;MACA,IAAI,CAACM,qBAAqB,CAAC,CAAC;IAChC;IACA,IAAI,CAAClB,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAG,EAAE;EACpB;EACAiB,qBAAqBA,CAAA,EAAG;IACpB,MAAMC,KAAK,GAAG,IAAI,CAACtB,aAAa,EAAEsB,KAAK,CAAC,cAAc,CAAC;IACvD,IAAI,CAACA,KAAK,IAAI,CAAC,IAAI,CAACpB,2BAA2B,EAAE;MAC7C,MAAM,IAAIY,KAAK,CAAC,2CAA2C,CAAC;IAChE,CAAC,MACI,IAAIS,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE;MACnC,MAAM,IAAIR,KAAK,CAAC,gBAAgBQ,KAAK,CAAC,CAAC,CAAC,0CAA0C,CAAC;IACvF;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAME,oBAAoBA,CAAA,EAAG;IACzB;IACA,IAAI,CAAC,IAAI,CAACrB,gBAAgB,EAAE;MACxB,IAAI,CAACC,MAAM,GAAG,MAAM,IAAI,CAACH,8BAA8B,CAACwB,YAAY,CAAC,IAAI,CAACC,eAAe,CAAC;MAC1F,IAAI,CAACvB,gBAAgB,GAAG,IAAIV,kBAAkB,CAACkC,gBAAgB,CAAC,YAAY;QACxE,OAAO,IAAI,CAAC1B,8BAA8B,CAAC2B,yBAAyB,CAAC,IAAI,CAACF,eAAe,CAAC;MAC9F,CAAC,EAAE,IAAI,CAACtB,MAAM,CAAC;IACnB;IACA;IACA;IACA,MAAMK,OAAO,GAAG,MAAM,IAAI,CAACN,gBAAgB,CAAC0B,iBAAiB,CAAC;MAC1D,GAAGrC,SAAS,CAACsC,YAAY;MACzBC,GAAG,EAAE,IAAI,CAAC7B,2BAA2B,CAAC8B,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC5B,MAAM,CAAC;MACtE6B,MAAM,EAAE;IACZ,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,eAAe,GAAGrC,QAAQ,CAACsC,MAAM,CAACC,YAAY,CAAC;MACjD;MACA;MACA;MACA;MACA,8BAA8B,EAAE,IAAI,CAACC;IACzC,CAAC,EAAE7B,OAAO,CAAC8B,OAAO,CAAC;IACnB;IACAJ,eAAe,CAACK,OAAO,CAAC,CAACjD,KAAK,EAAEkD,GAAG,KAAKP,iBAAiB,CAACQ,IAAI,CAAC;MAAED,GAAG;MAAElD;IAAM,CAAC,CAAC,CAAC;IAC/E;IACA,OAAOoD,kBAAkB,CAACC,IAAI,CAACC,SAAS,CAAC;MACrCd,GAAG,EAAEtB,OAAO,CAACsB,GAAG;MAChBE,MAAM,EAAExB,OAAO,CAACwB,MAAM;MACtBM,OAAO,EAAEL;IACb,CAAC,CAAC,CAAC;EACP;AACJ;AACA5C,OAAO,CAACE,SAAS,GAAGA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}