{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function () {\n  var ownKeys = function (o) {\n    ownKeys = Object.getOwnPropertyNames || function (o) {\n      var ar = [];\n      for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n      return ar;\n    };\n    return ownKeys(o);\n  };\n  return function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n    __setModuleDefault(result, mod);\n    return result;\n  };\n}();\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gcpResidencyCache = exports.METADATA_SERVER_DETECTION = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nexports.instance = instance;\nexports.project = project;\nexports.universe = universe;\nexports.bulk = bulk;\nexports.isAvailable = isAvailable;\nexports.resetIsAvailableCache = resetIsAvailableCache;\nexports.getGCPResidency = getGCPResidency;\nexports.setGCPResidency = setGCPResidency;\nexports.requestTimeout = requestTimeout;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nconst logger = __importStar(require(\"google-logging-utils\"));\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\nconst log = logger.log('gcp-metadata');\n/**\n * Metadata server detection override options.\n *\n * Available via `process.env.METADATA_SERVER_DETECTION`.\n */\nexports.METADATA_SERVER_DETECTION = Object.freeze({\n  'assume-present': \"don't try to ping the metadata server, but assume it's present\",\n  none: \"don't try to ping the metadata server, but don't try to use it either\",\n  'bios-only': \"treat the result of a BIOS probe as canonical (don't fall back to pinging)\",\n  'ping-only': 'skip the BIOS probe, and go straight to pinging'\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  }\n  // If no scheme is provided default to HTTP:\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n  return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\nasync function metadataAccessor(type, options = {}, noResponseRetries = 3, fastFail = false) {\n  const headers = new Headers(exports.HEADERS);\n  let metadataKey = '';\n  let params = {};\n  if (typeof type === 'object') {\n    const metadataAccessor = type;\n    new Headers(metadataAccessor.headers).forEach((value, key) => headers.set(key, value));\n    metadataKey = metadataAccessor.metadataKey;\n    params = metadataAccessor.params || params;\n    noResponseRetries = metadataAccessor.noResponseRetries || noResponseRetries;\n    fastFail = metadataAccessor.fastFail || fastFail;\n  } else {\n    metadataKey = type;\n  }\n  if (typeof options === 'string') {\n    metadataKey += `/${options}`;\n  } else {\n    validate(options);\n    if (options.property) {\n      metadataKey += `/${options.property}`;\n    }\n    new Headers(options.headers).forEach((value, key) => headers.set(key, value));\n    params = options.params || params;\n  }\n  const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n  const req = {\n    url: `${getBaseUrl()}/${metadataKey}`,\n    headers,\n    retryConfig: {\n      noResponseRetries\n    },\n    params,\n    responseType: 'text',\n    timeout: requestTimeout()\n  };\n  log.info('instance request %j', req);\n  const res = await requestMethod(req);\n  log.info('instance metadata is %s', res.data);\n  const metadataFlavor = res.headers.get(exports.HEADER_NAME);\n  if (metadataFlavor !== exports.HEADER_VALUE) {\n    throw new RangeError(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header. Expected '${exports.HEADER_VALUE}', got ${metadataFlavor ? `'${metadataFlavor}'` : 'no header'}`);\n  }\n  if (typeof res.data === 'string') {\n    try {\n      return jsonBigint.parse(res.data);\n    } catch {\n      /* ignore */\n    }\n  }\n  return res.data;\n}\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = {\n    ...options,\n    url: options.url?.toString().replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  };\n  // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment significantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Returns first resolved promise or if all promises get rejected we return an AggregateError.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n  const r1 = (0, gaxios_1.request)(options);\n  const r2 = (0, gaxios_1.request)(secondaryOptions);\n  return Promise.any([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const serviceAccount: {} = await instance('service-accounts/');\n * const serviceAccountEmail: string = await instance('service-accounts/default/email');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n/**\n * Obtain metadata for the current GCP project.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const projectId: string = await project('project-id');\n * const numericProjectId: number = await project('numeric-project-id');\n * ```\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n/**\n * Obtain metadata for the current universe.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const universeDomain: string = await universe('universe-domain');\n * ```\n */\nfunction universe(options) {\n  return metadataAccessor('universe', options);\n}\n/**\n * Retrieve metadata items in parallel.\n *\n * @see {@link https://cloud.google.com/compute/docs/metadata/predefined-metadata-keys}\n *\n * @example\n * ```\n * const data = await bulk([\n *   {\n *     metadataKey: 'instance',\n *   },\n *   {\n *     metadataKey: 'project/project-id',\n *   },\n * ] as const);\n *\n * // data.instance;\n * // data['project/project-id'];\n * ```\n *\n * @param properties The metadata properties to retrieve\n * @returns The metadata in `metadatakey:value` format\n */\nasync function bulk(properties) {\n  const r = {};\n  await Promise.all(properties.map(item => {\n    return (async () => {\n      const res = await metadataAccessor(item);\n      const key = item.metadataKey;\n      r[key] = res;\n    })();\n  }));\n  return r;\n}\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n  if (process.env.METADATA_SERVER_DETECTION) {\n    const value = process.env.METADATA_SERVER_DETECTION.trim().toLocaleLowerCase();\n    if (!(value in exports.METADATA_SERVER_DETECTION)) {\n      throw new RangeError(`Unknown \\`METADATA_SERVER_DETECTION\\` env variable. Got \\`${value}\\`, but it should be \\`${Object.keys(exports.METADATA_SERVER_DETECTION).join('`, `')}\\`, or unset`);\n    }\n    switch (value) {\n      case 'assume-present':\n        return true;\n      case 'none':\n        return false;\n      case 'bios-only':\n        return getGCPResidency();\n      case 'ping-only':\n      // continue, we want to ping the server\n    }\n  }\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(),\n      // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (e) {\n    const err = e;\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && (\n      // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code.toString()))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code.toString();\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      }\n      // Failure to resolve the metadata service means that it is not available.\n      return false;\n    }\n  }\n}\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Detects GCP Residency.\n * Caches results to reduce costs for subsequent calls.\n *\n * @see setGCPResidency for setting\n */\nfunction getGCPResidency() {\n  if (exports.gcpResidencyCache === null) {\n    setGCPResidency();\n  }\n  return exports.gcpResidencyCache;\n}\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n * @see getGCPResidency for getting\n */\nfunction setGCPResidency(value = null) {\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n  return getGCPResidency() ? 0 : 3000;\n}\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"names":["exports","instance","project","universe","bulk","isAvailable","resetIsAvailableCache","getGCPResidency","setGCPResidency","requestTimeout","gaxios_1","require","jsonBigint","gcp_residency_1","logger","__importStar","BASE_PATH","HOST_ADDRESS","SECONDARY_HOST_ADDRESS","HEADER_NAME","HEADER_VALUE","HEADERS","Object","freeze","log","METADATA_SERVER_DETECTION","none","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","headers","Headers","metadataKey","params","value","set","property","requestMethod","fastFailMetadataRequest","request","req","url","retryConfig","responseType","timeout","info","res","data","metadataFlavor","get","RangeError","parse","secondaryOptions","toString","replace","r1","r2","Promise","any","properties","r","all","map","item","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","trim","toLocaleLowerCase","join","undefined","e","err","DEBUG_AUTH","console","response","status","code","includes","emitWarning","message","gcpResidencyCache","detectGCPResidency","__exportStar"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}