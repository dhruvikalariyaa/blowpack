{"ast":null,"code":"\"use strict\";\n\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UrlSubjectTokenSupplier = void 0;\nconst authclient_1 = require(\"./authclient\");\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass UrlSubjectTokenSupplier {\n  url;\n  headers;\n  formatType;\n  subjectTokenFieldName;\n  additionalGaxiosOptions;\n  /**\n   * Instantiates a URL subject token supplier.\n   * @param opts The URL subject token supplier options to build the supplier with.\n   */\n  constructor(opts) {\n    this.url = opts.url;\n    this.formatType = opts.formatType;\n    this.subjectTokenFieldName = opts.subjectTokenFieldName;\n    this.headers = opts.headers;\n    this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n  }\n  /**\n   * Sends a GET request to the URL provided in the constructor and resolves\n   * with the returned external subject token.\n   * @param context {@link ExternalAccountSupplierContext} from the calling\n   *   {@link IdentityPoolClient}, contains the requested audience and subject\n   *   token type for the external account identity. Not used.\n   */\n  async getSubjectToken(context) {\n    const opts = {\n      ...this.additionalGaxiosOptions,\n      url: this.url,\n      method: 'GET',\n      headers: this.headers\n    };\n    authclient_1.AuthClient.setMethodName(opts, 'getSubjectToken');\n    let subjectToken;\n    if (this.formatType === 'text') {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data;\n    } else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n      const response = await context.transporter.request(opts);\n      subjectToken = response.data[this.subjectTokenFieldName];\n    }\n    if (!subjectToken) {\n      throw new Error('Unable to parse the subject_token from the credential_source URL');\n    }\n    return subjectToken;\n  }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;","map":{"version":3,"names":["Object","defineProperty","exports","value","UrlSubjectTokenSupplier","authclient_1","require","url","headers","formatType","subjectTokenFieldName","additionalGaxiosOptions","constructor","opts","getSubjectToken","context","method","AuthClient","setMethodName","subjectToken","response","transporter","request","data","Error"],"sources":["E:/blowpack/frountend/node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js"],"sourcesContent":["\"use strict\";\n// Copyright 2024 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UrlSubjectTokenSupplier = void 0;\nconst authclient_1 = require(\"./authclient\");\n/**\n * Internal subject token supplier implementation used when a URL\n * is configured in the credential configuration used to build an {@link IdentityPoolClient}\n */\nclass UrlSubjectTokenSupplier {\n    url;\n    headers;\n    formatType;\n    subjectTokenFieldName;\n    additionalGaxiosOptions;\n    /**\n     * Instantiates a URL subject token supplier.\n     * @param opts The URL subject token supplier options to build the supplier with.\n     */\n    constructor(opts) {\n        this.url = opts.url;\n        this.formatType = opts.formatType;\n        this.subjectTokenFieldName = opts.subjectTokenFieldName;\n        this.headers = opts.headers;\n        this.additionalGaxiosOptions = opts.additionalGaxiosOptions;\n    }\n    /**\n     * Sends a GET request to the URL provided in the constructor and resolves\n     * with the returned external subject token.\n     * @param context {@link ExternalAccountSupplierContext} from the calling\n     *   {@link IdentityPoolClient}, contains the requested audience and subject\n     *   token type for the external account identity. Not used.\n     */\n    async getSubjectToken(context) {\n        const opts = {\n            ...this.additionalGaxiosOptions,\n            url: this.url,\n            method: 'GET',\n            headers: this.headers,\n        };\n        authclient_1.AuthClient.setMethodName(opts, 'getSubjectToken');\n        let subjectToken;\n        if (this.formatType === 'text') {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data;\n        }\n        else if (this.formatType === 'json' && this.subjectTokenFieldName) {\n            const response = await context.transporter.request(opts);\n            subjectToken = response.data[this.subjectTokenFieldName];\n        }\n        if (!subjectToken) {\n            throw new Error('Unable to parse the subject_token from the credential_source URL');\n        }\n        return subjectToken;\n    }\n}\nexports.UrlSubjectTokenSupplier = UrlSubjectTokenSupplier;\n//# sourceMappingURL=urlsubjecttokensupplier.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,uBAAuB,GAAG,KAAK,CAAC;AACxC,MAAMC,YAAY,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC5C;AACA;AACA;AACA;AACA,MAAMF,uBAAuB,CAAC;EAC1BG,GAAG;EACHC,OAAO;EACPC,UAAU;EACVC,qBAAqB;EACrBC,uBAAuB;EACvB;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,IAAI,EAAE;IACd,IAAI,CAACN,GAAG,GAAGM,IAAI,CAACN,GAAG;IACnB,IAAI,CAACE,UAAU,GAAGI,IAAI,CAACJ,UAAU;IACjC,IAAI,CAACC,qBAAqB,GAAGG,IAAI,CAACH,qBAAqB;IACvD,IAAI,CAACF,OAAO,GAAGK,IAAI,CAACL,OAAO;IAC3B,IAAI,CAACG,uBAAuB,GAAGE,IAAI,CAACF,uBAAuB;EAC/D;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,MAAMG,eAAeA,CAACC,OAAO,EAAE;IAC3B,MAAMF,IAAI,GAAG;MACT,GAAG,IAAI,CAACF,uBAAuB;MAC/BJ,GAAG,EAAE,IAAI,CAACA,GAAG;MACbS,MAAM,EAAE,KAAK;MACbR,OAAO,EAAE,IAAI,CAACA;IAClB,CAAC;IACDH,YAAY,CAACY,UAAU,CAACC,aAAa,CAACL,IAAI,EAAE,iBAAiB,CAAC;IAC9D,IAAIM,YAAY;IAChB,IAAI,IAAI,CAACV,UAAU,KAAK,MAAM,EAAE;MAC5B,MAAMW,QAAQ,GAAG,MAAML,OAAO,CAACM,WAAW,CAACC,OAAO,CAACT,IAAI,CAAC;MACxDM,YAAY,GAAGC,QAAQ,CAACG,IAAI;IAChC,CAAC,MACI,IAAI,IAAI,CAACd,UAAU,KAAK,MAAM,IAAI,IAAI,CAACC,qBAAqB,EAAE;MAC/D,MAAMU,QAAQ,GAAG,MAAML,OAAO,CAACM,WAAW,CAACC,OAAO,CAACT,IAAI,CAAC;MACxDM,YAAY,GAAGC,QAAQ,CAACG,IAAI,CAAC,IAAI,CAACb,qBAAqB,CAAC;IAC5D;IACA,IAAI,CAACS,YAAY,EAAE;MACf,MAAM,IAAIK,KAAK,CAAC,kEAAkE,CAAC;IACvF;IACA,OAAOL,YAAY;EACvB;AACJ;AACAjB,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}