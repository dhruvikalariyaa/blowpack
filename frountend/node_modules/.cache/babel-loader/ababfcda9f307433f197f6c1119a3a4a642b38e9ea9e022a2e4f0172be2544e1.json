{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuthClientAuthHandler = void 0;\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\nconst gaxios_1 = require(\"gaxios\");\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\nclass OAuthClientAuthHandler {\n  #crypto = (0, crypto_1.createCrypto)();\n  #clientAuthentication;\n  transporter;\n  /**\n   * Instantiates an OAuth client authentication handler.\n   * @param options The OAuth Client Auth Handler instance options. Passing an `ClientAuthentication` directly is **@DEPRECATED**.\n   */\n  constructor(options) {\n    if (options && 'clientId' in options) {\n      this.#clientAuthentication = options;\n      this.transporter = new gaxios_1.Gaxios();\n    } else {\n      this.#clientAuthentication = options?.clientAuthentication;\n      this.transporter = options?.transporter || new gaxios_1.Gaxios();\n    }\n  }\n  /**\n   * Applies client authentication on the OAuth request's headers or POST\n   * body but does not process the request.\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n  applyClientAuthenticationOptions(opts, bearerToken) {\n    opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n    // Inject authenticated header.\n    this.injectAuthenticatedHeaders(opts, bearerToken);\n    // Inject authenticated request body.\n    if (!bearerToken) {\n      this.injectAuthenticatedRequestBody(opts);\n    }\n  }\n  /**\n   * Applies client authentication on the request's header if either\n   * basic authentication or bearer token authentication is selected.\n   *\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n  injectAuthenticatedHeaders(opts, bearerToken) {\n    // Bearer token prioritized higher than basic Auth.\n    if (bearerToken) {\n      opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers, {\n        authorization: `Bearer ${bearerToken}`\n      });\n    } else if (this.#clientAuthentication?.confidentialClientType === 'basic') {\n      opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n      const clientId = this.#clientAuthentication.clientId;\n      const clientSecret = this.#clientAuthentication.clientSecret || '';\n      const base64EncodedCreds = this.#crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n      gaxios_1.Gaxios.mergeHeaders(opts.headers, {\n        authorization: `Basic ${base64EncodedCreds}`\n      });\n    }\n  }\n  /**\n   * Applies client authentication on the request's body if request-body\n   * client authentication is selected.\n   *\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   */\n  injectAuthenticatedRequestBody(opts) {\n    if (this.#clientAuthentication?.confidentialClientType === 'request-body') {\n      const method = (opts.method || 'GET').toUpperCase();\n      if (!METHODS_SUPPORTING_REQUEST_BODY.includes(method)) {\n        throw new Error(`${method} HTTP method does not support ` + `${this.#clientAuthentication.confidentialClientType} ` + 'client authentication');\n      }\n      // Get content-type\n      const headers = new Headers(opts.headers);\n      const contentType = headers.get('content-type');\n      // Inject authenticated request body\n      if (contentType?.startsWith('application/x-www-form-urlencoded') || opts.data instanceof URLSearchParams) {\n        const data = new URLSearchParams(opts.data ?? '');\n        data.append('client_id', this.#clientAuthentication.clientId);\n        data.append('client_secret', this.#clientAuthentication.clientSecret || '');\n        opts.data = data;\n      } else if (contentType?.startsWith('application/json')) {\n        opts.data = opts.data || {};\n        Object.assign(opts.data, {\n          client_id: this.#clientAuthentication.clientId,\n          client_secret: this.#clientAuthentication.clientSecret || ''\n        });\n      } else {\n        throw new Error(`${contentType} content-types are not supported with ` + `${this.#clientAuthentication.confidentialClientType} ` + 'client authentication');\n      }\n    }\n  }\n  /**\n   * Retry config for Auth-related requests.\n   *\n   * @remarks\n   *\n   * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n   * config as some downstream APIs would prefer if customers explicitly enable retries,\n   * such as GCS.\n   */\n  static get RETRY_CONFIG() {\n    return {\n      retry: true,\n      retryConfig: {\n        httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE']\n      }\n    };\n  }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n  // Error response.\n  const errorCode = resp.error;\n  const errorDescription = resp.error_description;\n  const errorUri = resp.error_uri;\n  let message = `Error code ${errorCode}`;\n  if (typeof errorDescription !== 'undefined') {\n    message += `: ${errorDescription}`;\n  }\n  if (typeof errorUri !== 'undefined') {\n    message += ` - ${errorUri}`;\n  }\n  const newError = new Error(message);\n  // Copy properties from original error to newly generated error.\n  if (err) {\n    const keys = Object.keys(err);\n    if (err.stack) {\n      // Copy error.stack if available.\n      keys.push('stack');\n    }\n    keys.forEach(key => {\n      // Do not overwrite the message field.\n      if (key !== 'message') {\n        Object.defineProperty(newError, key, {\n          value: err[key],\n          writable: false,\n          enumerable: true\n        });\n      }\n    });\n  }\n  return newError;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","OAuthClientAuthHandler","getErrorFromOAuthErrorResponse","gaxios_1","require","crypto_1","METHODS_SUPPORTING_REQUEST_BODY","crypto","createCrypto","clientAuthentication","transporter","constructor","options","Gaxios","applyClientAuthenticationOptions","opts","bearerToken","headers","mergeHeaders","injectAuthenticatedHeaders","injectAuthenticatedRequestBody","authorization","confidentialClientType","clientId","clientSecret","base64EncodedCreds","encodeBase64StringUtf8","method","toUpperCase","includes","Error","Headers","contentType","get","startsWith","data","URLSearchParams","append","assign","client_id","client_secret","RETRY_CONFIG","retry","retryConfig","httpMethodsToRetry","resp","err","errorCode","error","errorDescription","error_description","errorUri","error_uri","message","newError","keys","stack","push","forEach","key","writable","enumerable"],"sources":["E:/blowpack/frountend/node_modules/google-auth-library/build/src/auth/oauth2common.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuthClientAuthHandler = void 0;\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;\nconst gaxios_1 = require(\"gaxios\");\nconst crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\nconst METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\nclass OAuthClientAuthHandler {\n    #crypto = (0, crypto_1.createCrypto)();\n    #clientAuthentication;\n    transporter;\n    /**\n     * Instantiates an OAuth client authentication handler.\n     * @param options The OAuth Client Auth Handler instance options. Passing an `ClientAuthentication` directly is **@DEPRECATED**.\n     */\n    constructor(options) {\n        if (options && 'clientId' in options) {\n            this.#clientAuthentication = options;\n            this.transporter = new gaxios_1.Gaxios();\n        }\n        else {\n            this.#clientAuthentication = options?.clientAuthentication;\n            this.transporter = options?.transporter || new gaxios_1.Gaxios();\n        }\n    }\n    /**\n     * Applies client authentication on the OAuth request's headers or POST\n     * body but does not process the request.\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    applyClientAuthenticationOptions(opts, bearerToken) {\n        opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n        // Inject authenticated header.\n        this.injectAuthenticatedHeaders(opts, bearerToken);\n        // Inject authenticated request body.\n        if (!bearerToken) {\n            this.injectAuthenticatedRequestBody(opts);\n        }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n    injectAuthenticatedHeaders(opts, bearerToken) {\n        // Bearer token prioritized higher than basic Auth.\n        if (bearerToken) {\n            opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers, {\n                authorization: `Bearer ${bearerToken}`,\n            });\n        }\n        else if (this.#clientAuthentication?.confidentialClientType === 'basic') {\n            opts.headers = gaxios_1.Gaxios.mergeHeaders(opts.headers);\n            const clientId = this.#clientAuthentication.clientId;\n            const clientSecret = this.#clientAuthentication.clientSecret || '';\n            const base64EncodedCreds = this.#crypto.encodeBase64StringUtf8(`${clientId}:${clientSecret}`);\n            gaxios_1.Gaxios.mergeHeaders(opts.headers, {\n                authorization: `Basic ${base64EncodedCreds}`,\n            });\n        }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n    injectAuthenticatedRequestBody(opts) {\n        if (this.#clientAuthentication?.confidentialClientType === 'request-body') {\n            const method = (opts.method || 'GET').toUpperCase();\n            if (!METHODS_SUPPORTING_REQUEST_BODY.includes(method)) {\n                throw new Error(`${method} HTTP method does not support ` +\n                    `${this.#clientAuthentication.confidentialClientType} ` +\n                    'client authentication');\n            }\n            // Get content-type\n            const headers = new Headers(opts.headers);\n            const contentType = headers.get('content-type');\n            // Inject authenticated request body\n            if (contentType?.startsWith('application/x-www-form-urlencoded') ||\n                opts.data instanceof URLSearchParams) {\n                const data = new URLSearchParams(opts.data ?? '');\n                data.append('client_id', this.#clientAuthentication.clientId);\n                data.append('client_secret', this.#clientAuthentication.clientSecret || '');\n                opts.data = data;\n            }\n            else if (contentType?.startsWith('application/json')) {\n                opts.data = opts.data || {};\n                Object.assign(opts.data, {\n                    client_id: this.#clientAuthentication.clientId,\n                    client_secret: this.#clientAuthentication.clientSecret || '',\n                });\n            }\n            else {\n                throw new Error(`${contentType} content-types are not supported with ` +\n                    `${this.#clientAuthentication.confidentialClientType} ` +\n                    'client authentication');\n            }\n        }\n    }\n    /**\n     * Retry config for Auth-related requests.\n     *\n     * @remarks\n     *\n     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}\n     * config as some downstream APIs would prefer if customers explicitly enable retries,\n     * such as GCS.\n     */\n    static get RETRY_CONFIG() {\n        return {\n            retry: true,\n            retryConfig: {\n                httpMethodsToRetry: ['GET', 'PUT', 'POST', 'HEAD', 'OPTIONS', 'DELETE'],\n            },\n        };\n    }\n}\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n    // Error response.\n    const errorCode = resp.error;\n    const errorDescription = resp.error_description;\n    const errorUri = resp.error_uri;\n    let message = `Error code ${errorCode}`;\n    if (typeof errorDescription !== 'undefined') {\n        message += `: ${errorDescription}`;\n    }\n    if (typeof errorUri !== 'undefined') {\n        message += ` - ${errorUri}`;\n    }\n    const newError = new Error(message);\n    // Copy properties from original error to newly generated error.\n    if (err) {\n        const keys = Object.keys(err);\n        if (err.stack) {\n            // Copy error.stack if available.\n            keys.push('stack');\n        }\n        keys.forEach(key => {\n            // Do not overwrite the message field.\n            if (key !== 'message') {\n                Object.defineProperty(newError, key, {\n                    value: err[key],\n                    writable: false,\n                    enumerable: true,\n                });\n            }\n        });\n    }\n    return newError;\n}\n//# sourceMappingURL=oauth2common.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}