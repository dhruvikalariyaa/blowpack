{"ast":null,"code":"// Google OAuth configuration\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\n\n// Check if Google Client ID is configured\nif (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === '992582811776-e3hmapsu1iquplaidp0ehp6p0fibg7qh.apps.googleusercontent.com') {\n  console.warn('Google OAuth is not configured. Please set REACT_APP_GOOGLE_CLIENT_ID in your .env file');\n}\n\n// Function to initialize Google Sign-In\nexport const initializeGoogleSignIn = () => {\n  return new Promise((resolve, reject) => {\n    if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === 'your_google_client_id_here') {\n      reject(new Error('Google OAuth is not configured. Please set REACT_APP_GOOGLE_CLIENT_ID in your .env file'));\n      return;\n    }\n    if (window.google && window.google.accounts.id) {\n      window.google.accounts.id.initialize({\n        client_id: GOOGLE_CLIENT_ID,\n        callback: handleCredentialResponse,\n        auto_select: false,\n        cancel_on_tap_outside: true\n      });\n      resolve();\n    } else {\n      reject(new Error('Google Sign-In library not loaded'));\n    }\n  });\n};\n\n// Function to render Google Sign-In button\nexport const renderGoogleSignInButton = (elementId, onSuccess, onError) => {\n  if (window.google && window.google.accounts.id) {\n    window.google.accounts.id.renderButton(document.getElementById(elementId), {\n      theme: 'outline',\n      size: 'large',\n      width: '100%',\n      text: 'continue_with',\n      shape: 'rectangular',\n      logo_alignment: 'left'\n    });\n\n    // Store callbacks globally for the credential response handler\n    window.googleAuthCallbacks = {\n      onSuccess,\n      onError\n    };\n  }\n};\n\n// Handle Google credential response\nconst handleCredentialResponse = async response => {\n  try {\n    const {\n      onSuccess,\n      onError\n    } = window.googleAuthCallbacks || {};\n    if (!response.credential) {\n      throw new Error('No credential received from Google');\n    }\n\n    // Decode the JWT token to get user info\n    const payload = JSON.parse(atob(response.credential.split('.')[1]));\n    const userData = {\n      googleId: payload.sub,\n      name: payload.name,\n      email: payload.email,\n      picture: payload.picture,\n      emailVerified: payload.email_verified\n    };\n    if (onSuccess) {\n      onSuccess(userData, response.credential);\n    }\n  } catch (error) {\n    console.error('Error handling Google credential response:', error);\n    const {\n      onError\n    } = window.googleAuthCallbacks || {};\n    if (onError) {\n      onError(error);\n    }\n  }\n};\n\n// Function to load Google Sign-In script\nexport const loadGoogleSignInScript = () => {\n  return new Promise((resolve, reject) => {\n    if (window.google && window.google.accounts.id) {\n      resolve();\n      return;\n    }\n    const script = document.createElement('script');\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.async = true;\n    script.defer = true;\n    script.onload = () => {\n      resolve();\n    };\n    script.onerror = () => {\n      reject(new Error('Failed to load Google Sign-In script'));\n    };\n    document.head.appendChild(script);\n  });\n};\n\n// Function to sign out from Google\nexport const signOutFromGoogle = () => {\n  if (window.google && window.google.accounts.id) {\n    window.google.accounts.id.disableAutoSelect();\n  }\n};\n\n// Function to get Google user info from credential\nexport const getGoogleUserInfo = credential => {\n  try {\n    const payload = JSON.parse(atob(credential.split('.')[1]));\n    return {\n      googleId: payload.sub,\n      name: payload.name,\n      email: payload.email,\n      picture: payload.picture,\n      emailVerified: payload.email_verified\n    };\n  } catch (error) {\n    console.error('Error parsing Google credential:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GOOGLE_CLIENT_ID","process","env","REACT_APP_GOOGLE_CLIENT_ID","console","warn","initializeGoogleSignIn","Promise","resolve","reject","Error","window","google","accounts","id","initialize","client_id","callback","handleCredentialResponse","auto_select","cancel_on_tap_outside","renderGoogleSignInButton","elementId","onSuccess","onError","renderButton","document","getElementById","theme","size","width","text","shape","logo_alignment","googleAuthCallbacks","response","credential","payload","JSON","parse","atob","split","userData","googleId","sub","name","email","picture","emailVerified","email_verified","error","loadGoogleSignInScript","script","createElement","src","async","defer","onload","onerror","head","appendChild","signOutFromGoogle","disableAutoSelect","getGoogleUserInfo"],"sources":["E:/blowpack/frountend/src/utils/googleAuth.js"],"sourcesContent":["// Google OAuth configuration\r\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\r\n\r\n// Check if Google Client ID is configured\r\nif (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === '992582811776-e3hmapsu1iquplaidp0ehp6p0fibg7qh.apps.googleusercontent.com') {\r\n  console.warn('Google OAuth is not configured. Please set REACT_APP_GOOGLE_CLIENT_ID in your .env file');\r\n}\r\n\r\n// Function to initialize Google Sign-In\r\nexport const initializeGoogleSignIn = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!GOOGLE_CLIENT_ID || GOOGLE_CLIENT_ID === 'your_google_client_id_here') {\r\n      reject(new Error('Google OAuth is not configured. Please set REACT_APP_GOOGLE_CLIENT_ID in your .env file'));\r\n      return;\r\n    }\r\n\r\n    if (window.google && window.google.accounts.id) {\r\n      window.google.accounts.id.initialize({\r\n        client_id: GOOGLE_CLIENT_ID,\r\n        callback: handleCredentialResponse,\r\n        auto_select: false,\r\n        cancel_on_tap_outside: true,\r\n      });\r\n      resolve();\r\n    } else {\r\n      reject(new Error('Google Sign-In library not loaded'));\r\n    }\r\n  });\r\n};\r\n\r\n// Function to render Google Sign-In button\r\nexport const renderGoogleSignInButton = (elementId, onSuccess, onError) => {\r\n  if (window.google && window.google.accounts.id) {\r\n    window.google.accounts.id.renderButton(\r\n      document.getElementById(elementId),\r\n      {\r\n        theme: 'outline',\r\n        size: 'large',\r\n        width: '100%',\r\n        text: 'continue_with',\r\n        shape: 'rectangular',\r\n        logo_alignment: 'left',\r\n      }\r\n    );\r\n    \r\n    // Store callbacks globally for the credential response handler\r\n    window.googleAuthCallbacks = { onSuccess, onError };\r\n  }\r\n};\r\n\r\n// Handle Google credential response\r\nconst handleCredentialResponse = async (response) => {\r\n  try {\r\n    const { onSuccess, onError } = window.googleAuthCallbacks || {};\r\n    \r\n    if (!response.credential) {\r\n      throw new Error('No credential received from Google');\r\n    }\r\n\r\n    // Decode the JWT token to get user info\r\n    const payload = JSON.parse(atob(response.credential.split('.')[1]));\r\n    \r\n    const userData = {\r\n      googleId: payload.sub,\r\n      name: payload.name,\r\n      email: payload.email,\r\n      picture: payload.picture,\r\n      emailVerified: payload.email_verified,\r\n    };\r\n\r\n    if (onSuccess) {\r\n      onSuccess(userData, response.credential);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling Google credential response:', error);\r\n    const { onError } = window.googleAuthCallbacks || {};\r\n    if (onError) {\r\n      onError(error);\r\n    }\r\n  }\r\n};\r\n\r\n// Function to load Google Sign-In script\r\nexport const loadGoogleSignInScript = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (window.google && window.google.accounts.id) {\r\n      resolve();\r\n      return;\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.src = 'https://accounts.google.com/gsi/client';\r\n    script.async = true;\r\n    script.defer = true;\r\n    script.onload = () => {\r\n      resolve();\r\n    };\r\n    script.onerror = () => {\r\n      reject(new Error('Failed to load Google Sign-In script'));\r\n    };\r\n    document.head.appendChild(script);\r\n  });\r\n};\r\n\r\n// Function to sign out from Google\r\nexport const signOutFromGoogle = () => {\r\n  if (window.google && window.google.accounts.id) {\r\n    window.google.accounts.id.disableAutoSelect();\r\n  }\r\n};\r\n\r\n// Function to get Google user info from credential\r\nexport const getGoogleUserInfo = (credential) => {\r\n  try {\r\n    const payload = JSON.parse(atob(credential.split('.')[1]));\r\n    return {\r\n      googleId: payload.sub,\r\n      name: payload.name,\r\n      email: payload.email,\r\n      picture: payload.picture,\r\n      emailVerified: payload.email_verified,\r\n    };\r\n  } catch (error) {\r\n    console.error('Error parsing Google credential:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}